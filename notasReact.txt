//////////////////////////////////////////////// Iniciando con React ////////////////////////////////////////////////

Inicialización de un proyecto en React
Creación de nuestro sitio web usando la plantilla por defecto de create-react-app:

-  npx create-react-app (nombre-de-tu-proyecto)

tuve un pequeño problema con npx,
primero escribi npm install -g npx y despues el npx creat-react-app pero no funcionaba. luego intente esto y me funciono…

-   npx create-react-app hola-mundo --use-npm
saludos…!!

Iniciar el servidor de desarrollo:

-  npm start


No olvides que puedes aprender a manejar de forma las diferentes herramientas de desarrollo en el Curso de Prework: Buenas Prácticas y Entorno de Desarrollo.

Creación y Tipos de Componentes
Los nombres de nuestros componentes deben empezar con una letra mayúscula, al igual que cada nueva palabra del componente. Esto lo conocemos como Pascal Case o Upper Camel Case.

Los componentes Stateful son los más robustos de React. Los usamos creando clases que extiendan de React.Component. Nos permiten manejar estado y ciclo de vida (más adelante los estudiaremos a profundidad).

-  import React, { Component } from 'react';

-  class Stateful extends Component {
-    constructor(props) {
-      super(props);
-  
-      this.state = { hello: 'hello world' };
-    }
-  
-    render() {
-      return (
-        <h1>{this.state.hello}h1>
-      );
-    }
-  }

-  export default Stateful;

También tenemos componentes Stateless o Presentacionales. Los usamos creando funciones que devuelvan código en formato JSX (del cual hablaremos en la próxima clase).

-  import React from 'react';

-  const Stateless = () => {
-    return (
-      <h1>¡Hola!h1>
-    );
-  }

// Otra forma de crearlos:
-  const Stateless = () => <h1>¡Hola!h1>;

-  export default Stateless;


//////////////////////////////////////////////// Iniciando con React ////////////////////////////////////////////////

//////////////////////////////////////////////// JSX: JavaScript + HTML ////////////////////////////////////////////////
Estamos acostumbrados a escribir código HTML en archivos .html y la lógica de JavaScript en archivos .js.

React usa JSX: una sintaxis que nos permite escribir la estructura HTML y la lógica en JavaScript desde un mismo lugar: nuestros componentes.

-  import React from 'react';

-  const HolaMundo = () => {
-    // Esto es JavaScript:
-    const claseCSSHolaMundo = 'container-red';
-    const mensajeTextoHTML = '¡Hola, Mundo!';

-    // Esto es JSX (HTML + JavaScript):
-    return (
-      <div className={claseCSSHolaMundo}>
-        <h1>{mensajeTextoHTML}h1>

-        {isTrue ? '¡Es verdad! :D' : '¡No es verdad! :('}
-      div>
-    );
-  }

-  export default HolaMundo;

//////////////////////////////////////////////// JSX: JavaScript + HTML ////////////////////////////////////////////////

//////////////////////////////////////////////// Props: Comunicación entre Componentes ////////////////////////////////////////////////

Las Props son la forma de enviar y recibir información en nuestros componentes. Son la forma de comunicar cada componente con el resto de la aplicación. Son muy parecidas a los parámetros y argumentos de las funciones en cualquier lenguaje de programación.

-  // Button.jsx
-  import React from 'react';
-  
-  const Button = props => {
-    return (
-      <div>
-        <button type="button">{props.text}button>
-      div>
-    );
-  };
-  
-  export default Button;


// index.jsx
-  import React from 'react';
-  import Button from './components/Button';

-  ReactDOM.render(
-    <Button text="¡Hola!" />,
-    document.getElementByid('root'),
-  );

//////////////////////////////////////////////// Props: Comunicación entre Componentes ////////////////////////////////////////////////

//////////////////////////////////////////////// State - Events ////////////////////////////////////////////////

"React nos permite responder a las interacciones de los usuarios con propiedades como onClick, onChange, onKeyPress, onFocus, onScroll, entre otras.

Estas propiedades reciben el nombre de la función que ejecuta el código que responde a las interacciones de los usuarios. Seguramente, esta función usará la función this.setState para actualizar el estado de nuestro componente.

-  class Button extends React.Component {
-    state = { count: 0 }

-    handleClick = () => (
-       this.setState({ count: this.state.count + 1 })
-    );

-    render() {
-      const { count } = this.state;
-  
-      return (
-        <div>
-          <h1>Manzanas: {count}</h1>
-          <button onClick{this.handleClick}>Sumar</button>
-        </div>
-      );
-    }
-  }


Recuerda que los nombres de estos eventos deben seguir la nomenclatura camelCase: primera palabra en minúsculas, iniciales de las siguientes palabras en mayúsculas y el resto también en minúsculas."



//////////////////////////////////////////////// State - Events ////////////////////////////////////////////////

//////////////////////////////////////////////// Instalación y configuración de entorno ////////////////////////////////////////////////

Iniciar un repositorio en GIT:

-    git init

Iniciar un proyecto de Node.js:

-    npm init -y
  ```

  Instalar React:

  ```bash
-  npm install react react-dom

//////////////////////////////////////////////// Instalación y configuración de entorno ////////////////////////////////////////////////

//////////////////////////////////////////////// Agregando compatibilidad con todos los navegadores usando Babel ////////////////////////////////////////////////

Babel es una herramienta muy popular para escribir JavaScript moderno y transformarlo en código que pueda entender cualquier navegador.

Instalación de Babel y otras herramientas para que funcione con React:

  npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader

Configuración de Babel (.babelrc):

-  {
-    ""presets"": [
-      ""@babel/preset-env"",
-      ""@babel/preset-react""
-    ],
-  }

//////////////////////////////////////////////// Agregando compatibilidad con todos los navegadores usando Babel ////////////////////////////////////////////////

//////////////////////////////////////////////// Webpack: Empaquetando nuestros módulos ////////////////////////////////////////////////

"Webpack es una herramienta que nos ayuda a compilar multiples archivos (JavaScript, HTML, CSS, imágenes) en uno solo (o a veces un poco más) que tendrá todo nuestro código listo para producción.

Instalación de Webpack y algunos plugins:
-  npm install webpack webpack-cli html-webpack-plugin html-loader  --save-dev

Configuración de Webpack (webpack.config.js):

-  const path = require('path');
-  const HtmlWebpackPlugin = require('html-webpack-plugin');

-  module.exports = {
-    entry: './src/index.js',
-    output: {
-      path: path.resolve(__dirname, 'dist'),
-      filename: 'bundle.js',
-    },
-    resolve: {
-      extensions: ['.js', '.jsx'],
-    },
-    module: {
-      rules: [
-        {
-          test: /\.(js|jsx)$/,
-          exclude: /node_modules/,
-          use: {
-            loader: 'babel-loader',
-          },
-        },
-        {
-          test: /\.html$/,
-          use: {
-            loader: 'html-loader',
-          },
-        },
-      ],
-    },
-    plugins: [
-      new HtmlWebpackPlugin({
-        template: './public/index.html',
-        filename: './index.html',
-      }),
-    ],
-  };

Script para ejecutar las tareas de Webpack (package.json):

-  {
-    ""scripts"": {
-      ""build"": ""webpack --mode production""
-    },
-  }

//////////////////////////////////////////////// Webpack: Empaquetando nuestros módulos ////////////////////////////////////////////////


//////////////////////////////////////////////// Webpack Dev Server: Reporte de errores y Cambios en tiempo real ////////////////////////////////////////////////

Instalación de Webpack Dev Server:

-  npm install --save-dev webpack-dev-server

Script para ejecutar el servidor de Webpack y visualizar los cambios en tiempo real (package.json):

-  {
-    ""scripts"": {
-      ""build"": ""webpack --mode production"",
-      ""start"": ""webpack-dev-server --open --mode development""
-    },
-  }



//////////////////////////////////////////////// Webpack Dev Server: Reporte de errores y Cambios en tiempo real ////////////////////////////////////////////////

//////////////////////////////////////////////// Estilos con SASS ////////////////////////////////////////////////

Los preprocesadores como Sass son herramientas que nos permiten escribir CSS con una sintaxis un poco diferente y más amigable que luego se transformará en CSS normal. Gracias a Sass podemos escribir CSS con variables, mixins, bucles, entre otras características.
Instalación de Sass:

-  npm install --save-dev mini-css-extract-plugin css-loader node-sass sass-loader

Configuración de Sass en Webpack (webpack.config.js):

-  const MiniCssExtractPlugin = require('mini-css-extract-plugin');

-  // ...

-  module: {
-    rules: [
-      {
-        test: /\.(s*)css$/,
-        use: [
-          { loader: MiniCssExtractPlugin.loader },
-          'css-loader',
-          'sass-loader',
-        ],
-      }, 
-    ],
-  },

-  // ...

-  plugins: [
-    new MiniCssExtractPlugin({
-      filename: 'assets/[name].css',
-    }),
-  ],`
-  ```

//////////////////////////////////////////////// Estilos con SASS ////////////////////////////////////////////////


//////////////////////////////////////////////// Configuración final: ESLint y Git Ignore ////////////////////////////////////////////////

El Git Ignore es un archivo que nos permite definir qué archivos NO queremos publicar en nuestros repositorios. Solo debemos crear el archivo .gitignore y escribir los nombres de los archivos y/o carpetas que no queremos publicar.
Los linters como ESLint son herramientas que nos ayudan a seguir buenas prácticas o guías de estilo de nuestro código.
Se encargan de revisar el código que escribimos para indicarnos dónde tenemos errores o posibles errores. En algunos casos también pueden solucionar los errores automáticamente. De esta manera podemos solucionar los errores incluso antes de que sucedan.
Instalación de ESLint:

npm install --save-dev eslint babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-react eslint-plugin-jsx-a11y

Podemos configurar las reglas de ESLint en el archivo .eslintrc. (Link: https://gist.githubusercontent.com/gndx/60ae8b1807263e3a55f790ed17c4c57a/raw/0de495fc84df71ce97ef87c37505362f3512e1c3/eslintrc)
(gitignore link: https://gist.githubusercontent.com/gndx/747a8913d12e96ff8374e2125efde544/raw/2b46b6f7ecb03ebd4fc4eacde5796caf1b752d7d/gitignore )

//////////////////////////////////////////////// Configuración final: ESLint y Git Ignore ////////////////////////////////////////////////

