//////////////////////////////////////////////// Iniciando con React ////////////////////////////////////////////////

Inicialización de un proyecto en React
Creación de nuestro sitio web usando la plantilla por defecto de create-react-app:

npx create-react-app nombre-de-tu-proyecto

tuve un pequeño problema con npx,
primero escribi npm install -g npx y despues el npx creat-react-app pero no funcionaba. luego intente esto y me funciono…

npx create-react-app hola-mundo --use-npm
saludos…!!

Iniciar el servidor de desarrollo:

npm start


No olvides que puedes aprender a manejar de forma las diferentes herramientas de desarrollo en el Curso de Prework: Buenas Prácticas y Entorno de Desarrollo.

Creación y Tipos de Componentes
Los nombres de nuestros componentes deben empezar con una letra mayúscula, al igual que cada nueva palabra del componente. Esto lo conocemos como Pascal Case o Upper Camel Case.

Los componentes Stateful son los más robustos de React. Los usamos creando clases que extiendan de React.Component. Nos permiten manejar estado y ciclo de vida (más adelante los estudiaremos a profundidad).

import React, { Component } from 'react';

class Stateful extends Component {
  constructor(props) {
    super(props);

    this.state = { hello: 'hello world' };
  }

  render() {
    return (
      <h1>{this.state.hello}h1>
    );
  }
}

export default Stateful;

También tenemos componentes Stateless o Presentacionales. Los usamos creando funciones que devuelvan código en formato JSX (del cual hablaremos en la próxima clase).

import React from 'react';

const Stateless = () => {
  return (
    <h1>¡Hola!h1>
  );
}

// Otra forma de crearlos:
const Stateless = () => <h1>¡Hola!h1>;

export default Stateless;


//////////////////////////////////////////////// Iniciando con React ////////////////////////////////////////////////

//////////////////////////////////////////////// JSX: JavaScript + HTML ////////////////////////////////////////////////
Estamos acostumbrados a escribir código HTML en archivos .html y la lógica de JavaScript en archivos .js.

React usa JSX: una sintaxis que nos permite escribir la estructura HTML y la lógica en JavaScript desde un mismo lugar: nuestros componentes.

import React from 'react';

const HolaMundo = () => {
  // Esto es JavaScript:
  const claseCSSHolaMundo = 'container-red';
  const mensajeTextoHTML = '¡Hola, Mundo!';

  // Esto es JSX (HTML + JavaScript):
  return (
    <div className={claseCSSHolaMundo}>
      <h1>{mensajeTextoHTML}h1>

      {isTrue ? '¡Es verdad! :D' : '¡No es verdad! :('}
    div>
  );
}

export default HolaMundo;

//////////////////////////////////////////////// JSX: JavaScript + HTML ////////////////////////////////////////////////

//////////////////////////////////////////////// Props: Comunicación entre Componentes ////////////////////////////////////////////////

Las Props son la forma de enviar y recibir información en nuestros componentes. Son la forma de comunicar cada componente con el resto de la aplicación. Son muy parecidas a los parámetros y argumentos de las funciones en cualquier lenguaje de programación.

// Button.jsx
import React from 'react';

const Button = props => {
  return (
    <div>
      <button type="button">{props.text}button>
    div>
  );
};

export default Button;


// index.jsx
import React from 'react';
import Button from './components/Button';

ReactDOM.render(
  <Button text="¡Hola!" />,
  document.getElementByid('root'),
);

//////////////////////////////////////////////// Props: Comunicación entre Componentes ////////////////////////////////////////////////

//////////////////////////////////////////////// State - Events ////////////////////////////////////////////////

"React nos permite responder a las interacciones de los usuarios con propiedades como onClick, onChange, onKeyPress, onFocus, onScroll, entre otras.

Estas propiedades reciben el nombre de la función que ejecuta el código que responde a las interacciones de los usuarios. Seguramente, esta función usará la función this.setState para actualizar el estado de nuestro componente.

class Button extends React.Component {
  state = { count: 0 }

  handleClick = () => (
     this.setState({ count: this.state.count + 1 })
  );

  render() {
    const { count } = this.state;

    return (
      <div>
        <h1>Manzanas: {count}</h1>
        <button onClick{this.handleClick}>Sumar</button>
      </div>
    );
  }
}


Recuerda que los nombres de estos eventos deben seguir la nomenclatura camelCase: primera palabra en minúsculas, iniciales de las siguientes palabras en mayúsculas y el resto también en minúsculas."



//////////////////////////////////////////////// State - Events ////////////////////////////////////////////////

//////////////////////////////////////////////// Instalación y configuración de entorno ////////////////////////////////////////////////

Iniciar un repositorio en GIT:

-    git init

Iniciar un proyecto de Node.js:

-    npm init -y
  ```

  Instalar React:

  ```bash
-  npm install react react-dom

//////////////////////////////////////////////// Instalación y configuración de entorno ////////////////////////////////////////////////

//////////////////////////////////////////////// Agregando compatibilidad con todos los navegadores usando Babel ////////////////////////////////////////////////

Babel es una herramienta muy popular para escribir JavaScript moderno y transformarlo en código que pueda entender cualquier navegador.

Instalación de Babel y otras herramientas para que funcione con React:

  npm install --save-dev @babel/core @babel/preset-env @babel/preset-react babel-loader

Configuración de Babel (.babelrc):

-  {
-    ""presets"": [
-      ""@babel/preset-env"",
-      ""@babel/preset-react""
-    ],
-  }

//////////////////////////////////////////////// Agregando compatibilidad con todos los navegadores usando Babel ////////////////////////////////////////////////

//////////////////////////////////////////////// Webpack: Empaquetando nuestros módulos ////////////////////////////////////////////////

"Webpack es una herramienta que nos ayuda a compilar multiples archivos (JavaScript, HTML, CSS, imágenes) en uno solo (o a veces un poco más) que tendrá todo nuestro código listo para producción.

Instalación de Webpack y algunos plugins:
-  npm install webpack webpack-cli html-webpack-plugin html-loader  --save-dev

Configuración de Webpack (webpack.config.js):

-  const path = require('path');
-  const HtmlWebpackPlugin = require('html-webpack-plugin');

-  module.exports = {
-    entry: './src/index.js',
-    output: {
-      path: path.resolve(__dirname, 'dist'),
-      filename: 'bundle.js',
-    },
-    resolve: {
-      extensions: ['.js', '.jsx'],
-    },
-    module: {
-      rules: [
-        {
-          test: /\.(js|jsx)$/,
-          exclude: /node_modules/,
-          use: {
-            loader: 'babel-loader',
-          },
-        },
-        {
-          test: /\.html$/,
-          use: {
-            loader: 'html-loader',
-          },
-        },
-      ],
-    },
-    plugins: [
-      new HtmlWebpackPlugin({
-        template: './public/index.html',
-        filename: './index.html',
-      }),
-    ],
-  };

Script para ejecutar las tareas de Webpack (package.json):

-  {
-    ""scripts"": {
-      ""build"": ""webpack --mode production""
-    },
-  }

//////////////////////////////////////////////// Webpack: Empaquetando nuestros módulos ////////////////////////////////////////////////

